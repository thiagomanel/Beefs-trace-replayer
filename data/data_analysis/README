- input_load_analysis.py - It outputs the number of operations in a timeframe
- output_load_analysis.py - It outputs the number of operations in a timeframe for a trace reproduction

- input_latency.py - It outputs 2-tuples (syscall_name, latency) for each traced request
- output_latency.py - It outputs latencies for a trace reproduction. If trace ipput is available, it also print syscall names

- timing_analysis.py - It analyses input and it reproduced load (latency and delays). Output format follows this pattern:
	(op, cmd_workflow_begin, cmd_workflow_end, replay_begin, replay_end, delta_from_input, delta_from_replay, waiting_delay)

- arrival_times.py - It outputs the arrival times, that is the begin stamp, of each traced input request

- group_clean_opssecs_by_date.py - It groups input_load_analysis.py output by date

-------------------------------------------------
#TODO: we need a script to process trace reproduction arrival time
#TODO: we have specific scripts for input and output (*_load_analysis.py *_latency.py). We can make a single script for each metric and switch between input and reproduction by using args
#TODO: we need a MPL script (to analysis the number of concurrent requests)
#TODO: should we analyse feitelson app characteristics ? likewise, burts of sync io, followed by computation (as well other patterns ...)
