#! /usr/bin/env stap
#
# Copyright (C) 2010 Red Hat, Inc.
# Written by William Cohen <wcohen@redhat.com>
#
# The linetimes.stp script takes two arguments: where to find the function
# and the function name. linetimes.stp will instrument each line in the
# function. It will print out the number of times that the function is
# called, a table with the average and maximum time each line takes,
# and control flow information when the script exits.
#
# For example all the lines of the do_unlinkat function:
#
# stap linetimes.stp kernel do_unlinkat

global calls, times, region, cfg, last_pp

probe $1.function(@2).call { calls <<< 1 }
probe $1.function(@2).return {
  t = gettimeofday_us()
  p = tid()
  s = times[p]
  if (s) {
    e = t - s
    region[last_pp] <<< e
    cfg[last_pp, pp()] <<< 1
  }
  delete times[tid()]
}

probe $1.statement(@2 "@*:*") {
  t = gettimeofday_us()
  p = tid()
  s = times[p]
  if (s) {
    e = t - s
    region[last_pp] <<< e
    cfg[last_pp, pp()] <<< 1
  }
  times[p] = t
  last_pp = pp()
}

probe end {
  printf("\n%s called %d", @2, @count(calls));
  printf("\n%-58s %10s %10s\n", "region", "avg(us)", "max(us)");
  foreach (p+ in region) {
    printf("%-58s %10d %10d\n", p, @avg(region[p]), @max(region[p]));
  }

  printf("\ncontrol flow graph information\n=======================\n")
  foreach ([src+, dest] in cfg) {
    /* print elements */
    if (old_src != src) {
      if (count == 1) printf (" %d\n", old_count);
      printf ("%-s", src)
      count = 1
    } else {
      if (count == 1) printf ("\n\t%-s %d\n", old_dest, old_count);
      ++count;
      printf ("\t%-s %d\n", dest, @count(cfg[src,dest]));
    }
    old_src = src
    old_dest = dest
    old_count = @count(cfg[src,dest])
  }
  /* print last element */
  if (old_src != "" && count == 1) printf (" %d\n", old_count)
}
