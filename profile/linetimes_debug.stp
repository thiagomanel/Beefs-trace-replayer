#! /usr/bin/env stap
#
# Copyright (C) 2010 Red Hat, Inc.
# Written by William Cohen <wcohen@redhat.com>
#
# The linetimes.stp script takes two arguments: where to find the function
# and the function name. linetimes.stp will instrument each line in the
# function. It will print out the number of times that the function is
# called, a table with the average and maximum time each line takes,
# and control flow information when the script exits.
#
# For example all the lines of the do_unlinkat function:
#
# stap linetimes.stp kernel do_unlinkat

global target_name, target_pid

probe kernel.function("do_generic_file_read") {
    if (shouldlog()) {
	printf("IN exec=%s tid=%d func=%s stamp=%d\n", execname(), tid(), pp(), gettimeofday_us())
    }
}

probe kernel.function("do_generic_file_read").return {
    if (shouldlog()) {
	printf("OUT exec=%s tid=%d func=%s stamp=%d\n", execname(), tid(), pp(), gettimeofday_us())
    }
}

probe kernel.statement("do_generic_file_read@*:*") {
    if (shouldlog()) {
	printf("STAT exec=%s tid=%d func=%s stamp=%d\n", execname(), tid(), pp(), gettimeofday_us())
    }
}

probe end {
	printf("leaving\n")
}

function shouldlog() {
    return execname() == "beefs_replayer"
}

probe begin {
    target_pid = 0
    target_name = ""

    %( $# == 1 || $# > 2 %?
        log("Wrong number of arguments, use none, 'pid nr' or 'name proc'")
	exit()
    %)

    %( $# == 2 %?
	if(@1 == "pid") {
	    target_pid = strtol(@2, 10)
            printf("#target_pid=%d\n", target_pid)
	}
	if(@1 == "name") {
	    target_name = @2
            printf("#target_name=%s\n", target_name)
	}
    %)
}
